<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>django中使用装饰器</title>
    <link href="/2022/08/13/decorator-in-django/"/>
    <url>/2022/08/13/decorator-in-django/</url>
    
    <content type="html"><![CDATA[<p>为Django类视图添加装饰器</p><p>在类视图中使用为函数视图准备的装饰器时，不能直接添加装饰器，需要使用method_decorator将其转换为适用于类视图方法的装饰器。</p><p>method_decorator装饰器使用name参数指明被装饰的方法</p><h4 id="第一种添加装饰器的方法"><a href="#第一种添加装饰器的方法" class="headerlink" title="第一种添加装饰器的方法"></a>第一种添加装饰器的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在想要加装饰器的类的 应用中 </span><br><span class="hljs-comment"># views.py</span><br>def my_decorator(view_func):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;定义装饰器&quot;</span><span class="hljs-string">&quot;&quot;</span><br>    def wrapper(request, *args, **kwargs):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;装饰器被调用了&quot;</span>)<br><span class="hljs-built_in">return</span> view_func(request, *args, **kwargs)<br>    <span class="hljs-built_in">return</span> warpper<br>class DemoView(View):<br>    def get(request):<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&quot;get请求&quot;</span>)<br> <br>    def post(request):<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&quot;pose请求&quot;</span>)<br><span class="hljs-comment"># url.py</span><br>url(r<span class="hljs-string">&#x27;^demo/$&#x27;</span>, views.my_decorator(view.DemoView.as_view()))<br></code></pre></td></tr></table></figure><h4 id="第二种添加装饰器的方法"><a href="#第二种添加装饰器的方法" class="headerlink" title="第二种添加装饰器的方法"></a>第二种添加装饰器的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># views.py</span><br>def my_decorator(view_func):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;定义装饰器&quot;</span><span class="hljs-string">&quot;&quot;</span><br>    def wrapper(request, *args, **kwargs):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;装饰器被调用了&quot;</span>)<br><span class="hljs-built_in">return</span> view_func(request, *args, **kwargs)<br>    <span class="hljs-built_in">return</span> warpper<br> <br><span class="hljs-comment"># 为全部请求方法添加装饰器</span><br><span class="hljs-comment"># method_decorator的作用是为函数视图装饰器补充第一个self参数，以适配类视图方法。</span><br>@method_decorator(my_decorator, name=<span class="hljs-string">&#x27;dispatch&#x27;</span>)<br>class DemoView(View):<br>    def get(self, request):<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&quot;get请求&quot;</span>)<br> <br>    def post(self, request):<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&quot;pose请求&quot;</span>)<br> <br><span class="hljs-comment"># 为特定请求方法添加装饰器</span><br>@method_decorator(my_decorator, name=<span class="hljs-string">&#x27;get&#x27;</span>)<br>class DemoView(View):<br>    def get(self, request):<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&quot;get请求&quot;</span>)<br> <br>    def post(self, request):<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&quot;pose请求&quot;</span>)<br> <br><span class="hljs-comment"># urls</span><br>url(r<span class="hljs-string">&#x27;^demo/$&#x27;</span>, view.DemoView.as_view())<br></code></pre></td></tr></table></figure><h4 id="第三种添加装饰器的方法"><a href="#第三种添加装饰器的方法" class="headerlink" title="第三种添加装饰器的方法"></a>第三种添加装饰器的方法</h4><p>如果需要为类视图的多个方法添加装饰器，但又不是所有的方法（为所有方法添加装饰器参考上面例子），也可以直接在需要添加装饰器的方法上使用method_decorator（就是为指定方法添加装饰器），如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">from django.utils.decorators import method_decorator<br><br>def my_decorator(view_func):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;定义装饰器&quot;</span><span class="hljs-string">&quot;&quot;</span><br>    def wrapper(request, *args, **kwargs):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;装饰器被调用了&quot;</span>)<br><span class="hljs-built_in">return</span> view_func(request, *args, **kwargs)<br>    <span class="hljs-built_in">return</span> warpper<br><span class="hljs-comment"># 为特定请求方法添加装饰器</span><br>class DemoView(View):<br> <br>    @method_decorator(my_decorator)  <span class="hljs-comment"># 为get方法添加了装饰器</span><br>    def get(self, request):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get方法&#x27;</span>)<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&#x27;ok&#x27;</span>)<br> <br>    @method_decorator(my_decorator)  <span class="hljs-comment"># 为post方法添加了装饰器</span><br>    def post(self, request):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;post方法&#x27;</span>)<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&#x27;ok&#x27;</span>)<br> <br>    def put(self, request):  <span class="hljs-comment"># 没有为put方法添加装饰器</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;put方法&#x27;</span>)<br>        <span class="hljs-built_in">return</span> HttpResponse(<span class="hljs-string">&#x27;ok&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>decorator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django中使用jwt</title>
    <link href="/2022/08/13/jwt-in-django/"/>
    <url>/2022/08/13/jwt-in-django/</url>
    
    <content type="html"><![CDATA[<h3 id="pyJWT简述"><a href="#pyJWT简述" class="headerlink" title="pyJWT简述"></a>pyJWT简述</h3><ul><li><p>pyJWT下载</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">pip install pyJWT<br></code></pre></td></tr></table></figure></li><li><p>JWT构成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xxxxxxxxxxxxx.xxxxxxxxxxxxxx.xxxxxxxxxxxxxxxx<br></code></pre></td></tr></table></figure><p>jwt是由三段信息构成，将3部分信息构成JWT字符串，通过点进行分割，第一部分称为头部(header),第二部分称为载荷(payload类似于飞机上承载的物品),第三部分是签证(signature)。</p></li><li><p>header</p><ul><li>jwt的头部承载两部分：声明类型，声明加密算法  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">headers = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;jwt&quot;</span>,<br>    <span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>playload</p><ul><li>载荷就是存放有效信息的地方，这个名字像是特指飞机上承载的货品，这些有效信息包含三部分：<ul><li><p>标准中注册声明(建议不强制使用)：</p><ul><li>iss:jwt签发者。</li><li>sub:jwt所面向的用户</li><li>aud:接收jwt的一方</li><li>exp:jwt过期时间，这个过期时间必须大于签发时间</li><li>nbf:定义在什么时间之前，该jwt都是不可用的</li><li>lat:jwt的签发时间</li><li>jti:jwt的唯一身份表示，主要用来作为一次性token,从而回避重放攻击。</li></ul></li><li><p>公共的声明：</p><ul><li>可以添加任何信息，一般添加用户相关信息。但不建议添加敏感信息，因为该部分在客户端可解密</li></ul></li><li><p>私有的声明：</p><ul><li>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;xjk&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>signature</p><ul><li>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：<ul><li>header(base64后的)</li><li>payload(base64后的)</li><li>secret</li></ul></li><li>这个部分需要base64加密后的header和base64加密后pyload使用，连接组成的字符串，然后通过header中声明加密方式，进行加盐secret组合加密，这样构成第三部分</li></ul></li></ul><h3 id="pyJWT在django应用"><a href="#pyJWT在django应用" class="headerlink" title="pyJWT在django应用"></a>pyJWT在django应用</h3><ul><li>views视图： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">from django.http import JsonResponse<br> <br>from django.views import View<br>from django.views.decorators.csrf import csrf_exempt<br>from django.utils.decorators import method_decorator<br>from utils.jwt_auth import create_token<br> <br><span class="hljs-comment"># 定义method_decorator 免 csrf校验， dispatch表示所有请求，因为所有请求都先经过dispatch</span><br>@method_decorator(csrf_exempt,name=<span class="hljs-string">&quot;dispatch&quot;</span>)<br>class LoginView(View):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    登陆校验</span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    def post(self,request,*args,**kwargs):<br>        user = request.POST.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        <span class="hljs-built_in">pwd</span> = request.POST.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-comment"># 这里简单写一个账号密码</span><br>        <span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;xjk&quot;</span> and <span class="hljs-built_in">pwd</span> == <span class="hljs-string">&quot;123&quot;</span>:<br>            <span class="hljs-comment"># 登陆成功进行校验</span><br>            token = create_token(&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xjk&quot;</span>&#125;)<br>            <span class="hljs-comment"># 返回JWT token</span><br>            <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>:True,<span class="hljs-string">&quot;token&quot;</span>:token&#125;)<br>        <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>:False,<span class="hljs-string">&quot;error&quot;</span>:<span class="hljs-string">&quot;用户名密码错误&quot;</span>&#125;)<br> <br><span class="hljs-comment"># 定义method_decorator 免 csrf校验， dispatch表示所有请求，因为所有请求都先经过dispatch</span><br>@method_decorator(csrf_exempt,name=<span class="hljs-string">&quot;dispatch&quot;</span>)<br>class OrderView(View):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    登陆后可以访问</span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    def get(self, request, *args, **kwargs):<br>        <span class="hljs-comment"># 打印用户jwt信息</span><br>        <span class="hljs-built_in">print</span>(request.user_info)<br>        <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;订单列表&#x27;</span>&#125;)<br> <br>    def post(self, request, *args, **kwargs):<br>        <span class="hljs-built_in">print</span>(request.user_info)<br>        <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;添加订单&#x27;</span>&#125;)<br> <br>    def put(self, request, *args, **kwargs):<br>        <span class="hljs-built_in">print</span>(request.user_info)<br>        <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;修改订单&#x27;</span>&#125;)<br> <br>    def delete(self, request, *args, **kwargs):<br>        <span class="hljs-built_in">print</span>(request.user_info)<br>        <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;删除订单&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li><li>定于jwt工具 utils&#x2F;jwt_auth.py<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">import jwt<br>import datetime<br>from jwt import exceptions<br><span class="hljs-comment"># 加的盐</span><br>JWT_SALT = <span class="hljs-string">&quot;ds()udsjo@jlsdosjf)wjd_#(#)$&quot;</span><br> <br>def create_token(payload,<span class="hljs-built_in">timeout</span>=20):<br>    <span class="hljs-comment"># 声明类型，声明加密算法</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;jwt&quot;</span>,<br>        <span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span><br>    &#125;<br>    <span class="hljs-comment"># 设置过期时间</span><br>    payload[<span class="hljs-string">&#x27;exp&#x27;</span>] = datetime.datetime.utcnow() + datetime.timedelta(minutes=20)<br>    result = jwt.encode(payload=payload,key=JWT_SALT,algorithm=<span class="hljs-string">&quot;HS256&quot;</span>,headers=headers).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-comment"># 返回加密结果</span><br>    <span class="hljs-built_in">return</span> result<br> <br>def parse_payload(token):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    用于解密</span><br><span class="hljs-string">    :param token:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    result = &#123;<span class="hljs-string">&quot;status&quot;</span>:False,<span class="hljs-string">&quot;data&quot;</span>:None,<span class="hljs-string">&quot;error&quot;</span>:None&#125;<br>    try:<br>        <span class="hljs-comment"># 进行解密</span><br>        verified_payload = jwt.decode(token,JWT_SALT,True)<br>        result[<span class="hljs-string">&quot;status&quot;</span>] = True<br>        result[<span class="hljs-string">&#x27;data&#x27;</span>]=verified_payload<br>    except exceptions.ExpiredSignatureError:<br>        result[<span class="hljs-string">&#x27;error&#x27;</span>] = <span class="hljs-string">&#x27;token已失效&#x27;</span><br>    except jwt.DecodeError:<br>        result[<span class="hljs-string">&#x27;error&#x27;</span>] = <span class="hljs-string">&#x27;token认证失败&#x27;</span><br>    except jwt.InvalidTokenError:<br>        result[<span class="hljs-string">&#x27;error&#x27;</span>] = <span class="hljs-string">&#x27;非法的token&#x27;</span><br>    <span class="hljs-built_in">return</span> result<br></code></pre></td></tr></table></figure></li><li>中间件进行jwt校验 middlewares&#x2F;jwt.py<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">class JwtAuthorizationMiddleware(MiddlewareMixin):<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    用户需要通过请求头的方式来进行传输token，例如：</span><br><span class="hljs-string">    Authorization:jwt xxxxxxxxx.xxxxxxxx.xxxxxxxxxxx</span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span><br>    def process_request(self, request):<br> <br>        <span class="hljs-comment"># 如果是登录页面，则通过</span><br>        <span class="hljs-keyword">if</span> request.path_info == <span class="hljs-string">&#x27;/login/&#x27;</span>:<br>            <span class="hljs-built_in">return</span><br>        <span class="hljs-comment"># 非登录页面需要校验token</span><br>        authorization = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(authorization)<br>        auth = authorization.split()<br>        <span class="hljs-comment"># 验证头信息的token信息是否合法</span><br>        <span class="hljs-keyword">if</span> not auth:<br>            <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;未获取到Authorization请求头&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>: False&#125;)<br>        <span class="hljs-keyword">if</span> auth[0].lower() != <span class="hljs-string">&#x27;jwt&#x27;</span>:<br>            <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Authorization请求头中认证方式错误&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>: False&#125;)<br>        <span class="hljs-keyword">if</span> len(auth) == 1:<br>            <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&quot;非法Authorization请求头&quot;</span>, <span class="hljs-string">&#x27;status&#x27;</span>: False&#125;)<br>        <span class="hljs-keyword">elif</span> len(auth) &gt; 2:<br>            <span class="hljs-built_in">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&quot;非法Authorization请求头&quot;</span>, <span class="hljs-string">&#x27;status&#x27;</span>: False&#125;)<br>        token = auth[1]<br>        <span class="hljs-comment"># 解密</span><br>        result = parse_payload(token)<br>        <span class="hljs-keyword">if</span> not result[<span class="hljs-string">&#x27;status&#x27;</span>]:<br>            <span class="hljs-built_in">return</span> JsonResponse(result)<br>        <span class="hljs-comment"># 将解密后数据赋值给user_info</span><br>        request.user_info = result[<span class="hljs-string">&#x27;data&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li>settings注册中间件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">MIDDLEWARE = [<br>    ...<br>    <span class="hljs-string">&#x27;middlewares.jwt.JwtAuthorizationMiddleware&#x27;</span>,<br>    ...<br>]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pgsql存储过程 plpgsql</title>
    <link href="/2022/06/16/plpgsql/"/>
    <url>/2022/06/16/plpgsql/</url>
    
    <content type="html"><![CDATA[<h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">CREATE OR REPLACE FUNCTION <span class="hljs-string">&quot;public&quot;</span>.<span class="hljs-string">&quot;somefunc&quot;</span>()<br>  RETURNS TABLE(<span class="hljs-string">&quot;aa&quot;</span> varchar, <span class="hljs-string">&quot;bb&quot;</span> int8) AS $BODY$<br>DECLARE<br>allnum <span class="hljs-built_in">integer</span>;<br>avgnum <span class="hljs-built_in">integer</span>;<br>doubleavg <span class="hljs-built_in">integer</span>;<br>sumnum <span class="hljs-built_in">integer</span>;<br>lastad varchar(100);<br>themax <span class="hljs-built_in">integer</span>;<br>my_cursor REFCURSOR;<br>rec_film   RECORD;<br>rec  REFCURSOR;<br>BEGIN<br>DROP TABLE If Exists tmp_c1;<br>DROP TABLE If Exists tmp_c2;<br>-- 清除历史的导出数据<br>TRUNCATE TABLE 导出数据;<br>-- 提取责任县市区为醴陵的数据<br>CREATE TABLE tmp_c1 AS select * FROM 未上报 WHERE 责任县市区 LIKE <span class="hljs-string">&#x27;醴陵%&#x27;</span>;<br>-- 醴陵总数据<br>select count(*) into allnum from tmp_c1;<br>-- 平均数据<br>avgnum :=  (allnum-allnum%29)/29;<br>doubleavg := avgnum * 2;<br>-- 将活动地为空或者不为醴陵的 修改成 醴陵市<br>update tmp_c1 <span class="hljs-built_in">set</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市来龙门街道&#x27;</span> <span class="hljs-built_in">where</span> 最后活动地 is null;<br>update tmp_c1 <span class="hljs-built_in">set</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市来龙门街道&#x27;</span> <span class="hljs-built_in">where</span> 最后活动地 not like <span class="hljs-string">&#x27;%醴陵%&#x27;</span>;<br>-- 提取乡镇对应的总数据量<br>CREATE TABLE tmp_c2 as select 最后活动地,count(最后活动地) as 总数 from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 &lt;&gt; <span class="hljs-string">&#x27;醴陵市&#x27;</span> group by 最后活动地;<br><br>-- 没有活动地的街道 新增总数0<br>insert into tmp_c2 select 街道.最后活动地,街道.总数 from 街道 left <span class="hljs-built_in">join</span> (select 最后活动地,count(最后活动地) as 总数 from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 &lt;&gt; <span class="hljs-string">&#x27;醴陵市&#x27;</span> group by 最后活动地) tmp_c3 on 街道.最后活动地 = tmp_c3.最后活动地 <span class="hljs-built_in">where</span> tmp_c3.最后活动地 is null;<br><br>-- 操作数据大于2倍的村镇<br>select count(*) into themax from tmp_c2 <span class="hljs-built_in">where</span> 总数 &gt; doubleavg;<br>WHILE themax &gt;= 1 LOOP<br>-- 获取最后活动地,总数的值<br>select 最后活动地,总数 into lastad,sumnum from tmp_c2 <span class="hljs-built_in">where</span> 总数 &gt; doubleavg <span class="hljs-built_in">limit</span> 1 offset (themax-1);<br>-- 复制2倍的数据到导出表<br>insert into 导出数据 select * from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = lastad <span class="hljs-built_in">limit</span> doubleavg;<br>-- 删除复制走的数据<br>DELETE FROM tmp_c1 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> (select <span class="hljs-built_in">id</span> from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = lastad <span class="hljs-built_in">limit</span> doubleavg);<br>-- 修改未复制的数据为醴陵市<br>update tmp_c1 <span class="hljs-built_in">set</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市&#x27;</span>,备注 = lastad <span class="hljs-built_in">where</span> 最后活动地 = lastad;<br>themax := themax - 1 ;<br>END LOOP ; <br><br>-- 操作数据小于等于两倍、大于一倍的村镇<br>select count(*) into themax from tmp_c2 <span class="hljs-built_in">where</span> 总数&lt;= doubleavg and 总数 &gt; avgnum;<br>WHILE themax &gt;= 1 LOOP<br>-- 获取最后活动地,总数的值<br>select 最后活动地,总数 into lastad,sumnum from tmp_c2 <span class="hljs-built_in">where</span> 总数&lt;= doubleavg and 总数 &gt; avgnum <span class="hljs-built_in">limit</span> 1 offset (themax-1);<br>-- 复制1倍的数据到导出表<br>insert into 导出数据 select * from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = lastad;<br>-- 删除复制走的数据<br>DELETE FROM tmp_c1 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> (select <span class="hljs-built_in">id</span> from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = lastad);<br>-- 修改未复制的数据为醴陵市<br>update tmp_c1 <span class="hljs-built_in">set</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市&#x27;</span> <span class="hljs-built_in">where</span> 最后活动地 = lastad;<br>themax := themax - 1 ;<br>END LOOP ;<br><br><br>-- 操作数据小于等于一倍的村镇<br>select count(*) into themax from tmp_c2 <span class="hljs-built_in">where</span> 总数 &lt;= avgnum;<br>WHILE themax &gt;= 1 LOOP<br>-- 获取最后活动地,总数的值<br>select 最后活动地,总数 into lastad,sumnum from tmp_c2 <span class="hljs-built_in">where</span> 总数 &lt;= avgnum order by 总数 desc <span class="hljs-built_in">limit</span> 1;<br>-- 复制1倍的数据到导出表<br>insert into 导出数据 select * from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = lastad;<br>-- 删除复制走的数据<br>DELETE FROM tmp_c1 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> (select <span class="hljs-built_in">id</span> from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = lastad);<br>-- 复制1倍差的数据到导出表<br>insert into 导出数据 select * from tmp_c1 <span class="hljs-built_in">where</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市&#x27;</span> order by random() <span class="hljs-built_in">limit</span> (avgnum - sumnum);<br>-- 删除复制走的数据<br>DELETE FROM tmp_c1 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> (select <span class="hljs-built_in">id</span> from 导出数据 <span class="hljs-built_in">where</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市&#x27;</span>);<br>-- 修改复制走的数据为该村镇<br>update 导出数据 <span class="hljs-built_in">set</span> 最后活动地 = lastad <span class="hljs-built_in">where</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市&#x27;</span>;<br>-- 删除已经操作过的村镇<br>delete from tmp_c2 <span class="hljs-built_in">where</span> 最后活动地 = lastad;<br>themax := themax - 1 ;<br>END LOOP ; <br><br>-- 复制剩下的数据到导出数据<br>insert into 导出数据 select * from tmp_c1;<br>-- 修改复制走的数据为该村镇<br>update 导出数据 <span class="hljs-built_in">set</span> 最后活动地 = 备注 <span class="hljs-built_in">where</span> 最后活动地 = <span class="hljs-string">&#x27;醴陵市&#x27;</span>;<br><br>-- 修改所有数据的备注为NULL<br>update 导出数据 <span class="hljs-built_in">set</span> 备注 = NULL;<br><br>-- 电话号码相同的 最后活动地相同<br>OPEN my_cursor FOR select 电话号码 from 导出数据 <span class="hljs-built_in">where</span> 电话号码 is not null group by 电话号码 having count(*) &gt;= 2;<br>LOOP<br>FETCH my_cursor INTO rec_film;<br>EXIT WHEN NOT FOUND;<br>update 导出数据 <span class="hljs-built_in">set</span> 最后活动地 = (select 最后活动地 from 导出数据 <span class="hljs-built_in">where</span> 电话号码 = rec_film.电话号码 <span class="hljs-built_in">limit</span> 1) <span class="hljs-built_in">where</span> 电话号码 = rec_film.电话号码;<br>END LOOP;<br>CLOSE my_cursor;<br><br>-- 姓名相同的 最后活动地相同<br>OPEN my_cursor FOR select 姓名 from 导出数据 <span class="hljs-built_in">where</span> 姓名 is not null  group by 姓名 having count(*) &gt;= 2;<br>LOOP<br>FETCH my_cursor INTO rec_film;<br>EXIT WHEN NOT FOUND;<br>update 导出数据 <span class="hljs-built_in">set</span> 最后活动地 = (select 最后活动地 from 导出数据 <span class="hljs-built_in">where</span> 姓名 = rec_film.姓名 <span class="hljs-built_in">limit</span> 1) <span class="hljs-built_in">where</span> 姓名 = rec_film.姓名;<br>END LOOP;<br>CLOSE my_cursor;<br><br>-- 身份证号相同的 最后活动地相同<br>OPEN my_cursor FOR select 身份证号 from 导出数据 <span class="hljs-built_in">where</span> 身份证号 is not null  group by 身份证号 having count(*) &gt;= 2;<br>LOOP<br>FETCH my_cursor INTO rec_film;<br>EXIT WHEN NOT FOUND;<br>update 导出数据 <span class="hljs-built_in">set</span> 最后活动地 = (select 最后活动地 from 导出数据 <span class="hljs-built_in">where</span> 身份证号 = rec_film.身份证号 <span class="hljs-built_in">limit</span> 1) <span class="hljs-built_in">where</span> 身份证号 = rec_film.身份证号;<br>END LOOP;<br>CLOSE my_cursor;<br><br>RETURN QUERY select 最后活动地,count(*) as 总数 from 导出数据 group by 最后活动地 order by 总数 desc;<br>END;<br>$BODY$<br>  LANGUAGE plpgsql VOLATILE<br>  COST 100<br>  ROWS 1000<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pgsql</tag>
      
      <tag>存储过程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的数据库操作</title>
    <link href="/2022/06/16/pythonforsql/"/>
    <url>/2022/06/16/pythonforsql/</url>
    
    <content type="html"><![CDATA[<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">import psycopg2<br></code></pre></td></tr></table></figure><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取连接</span><br>conn = psycopg2.connect(database=<span class="hljs-string">&quot;postgres&quot;</span>, user=<span class="hljs-string">&quot;postgres&quot;</span>,<br>                        password=<span class="hljs-string">&quot;root&quot;</span>, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-string">&quot;5432&quot;</span>)<br><span class="hljs-comment"># 获取游标对象</span><br>cursor = conn.cursor()<br></code></pre></td></tr></table></figure><h4 id="连接数据库-1"><a href="#连接数据库-1" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行SQL</span><br>cursor.execute(<span class="hljs-string">&quot;DROP TABLE If Exists teldc&quot;</span>)<br><br><span class="hljs-comment"># 提交修改</span><br>conn.commit()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pgsql的常用函数</title>
    <link href="/2022/06/16/pgsqlfunction/"/>
    <url>/2022/06/16/pgsqlfunction/</url>
    
    <content type="html"><![CDATA[<h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>用法:   || </p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># back字段 由 字符串和city字段重新拼接</span><br>update cksw SET back= <span class="hljs-string">&#x27;由&#x27;</span> || city || <span class="hljs-string">&#x27;上报后转入！&#x27;</span> || back<br></code></pre></td></tr></table></figure><h4 id="合并字符串函数"><a href="#合并字符串函数" class="headerlink" title="合并字符串函数"></a>合并字符串函数</h4><p>用法：concat(a,b,c,,,,) 函数将所有参数链接为一个字符串并返回结果。 参数中的 NULL 会被忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">select concat(<span class="hljs-string">&#x27;postgresql&#x27;</span>,<span class="hljs-string">&#x27;13&#x27;</span>) , concat(<span class="hljs-string">&#x27;postgresql&#x27;</span>,null,<span class="hljs-string">&#x27;testdb&#x27;</span>);<br><span class="hljs-comment"># postgresql13 postgresqltestdb</span><br></code></pre></td></tr></table></figure><p>concat_ws(x,s1,s2,,,) 函数使用分隔符连接一个或多个参数的字符串表示并返回结果。 参数中的 NULL 会被忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT concat_ws(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>,null, <span class="hljs-string">&#x27;World&#x27;</span>)<br><span class="hljs-comment"># Hello World</span><br></code></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>用法: 用于搜索并用新字符串替换所有出现的字符串。<br>REPLACE(source, old_text, new_text)<br>source是您要替换它的字符串<br>old_text是您要搜索和替换的文本。如果old_text在字符串中多次出现，则所有出现的内容都将被替换<br>new_text是新文本，它将替换旧文本(old_text)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 替换city字段为荷塘区</span><br>update cksw <span class="hljs-built_in">set</span> city=REPLACE(city,city,<span class="hljs-string">&#x27;荷塘区&#x27;</span>)<br><br><span class="hljs-comment"># 替换email字段中所有的sakilacustomer.org 为 geeksforgeeks.org</span><br>UPDATE customer SET email = REPLACE(email,<span class="hljs-string">&#x27;sakilacustomer.org&#x27;</span>,<span class="hljs-string">&#x27;geeksforgeeks.org&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="计算字符串字符数和字符串长度的函数"><a href="#计算字符串字符数和字符串长度的函数" class="headerlink" title="计算字符串字符数和字符串长度的函数"></a>计算字符串字符数和字符串长度的函数</h4><p>用法：char_length(str)返回值为字符串str所包含的字符个数。一个多字节字符算作一个单字符。<br>length(str)返回值为字符串的字节长度，使用utf8编码字符集时，一个汉字是3字节，一个数字或字母算一个字节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">select char_length(<span class="hljs-string">&#x27;zhang&#x27;</span>),char_length(<span class="hljs-string">&#x27;张&#x27;</span>)<br><span class="hljs-comment"># 5 1</span><br>select length(<span class="hljs-string">&#x27;zhang&#x27;</span>),length(<span class="hljs-string">&#x27;张&#x27;</span>)<br><span class="hljs-comment"># 5 1</span><br></code></pre></td></tr></table></figure><p>length函数的计算结果和char_length函数相同，因为英文字符的个数和所占字节相同，一个字符占一个字节。</p><h4 id="在指定字符串中提取最左侧、最右侧的指定数量的字符并返回"><a href="#在指定字符串中提取最左侧、最右侧的指定数量的字符并返回" class="headerlink" title="在指定字符串中提取最左侧、最右侧的指定数量的字符并返回"></a>在指定字符串中提取最左侧、最右侧的指定数量的字符并返回</h4><p>用法:left(str, num)<br>参数<br>str 必需的。 一个字符串。<br>num 必需的。 需要返回的字符的数量。它可以是正数或者负数。如果它是负数，left() 函数将返回除了最右侧的 -num 个字符之外的其他字符。<br>返回值<br>left() 函数返回字符串 str 的最左侧的 num 个字符。<br>如果 num 是负数，left() 函数将返回字符串中除了最右侧的 -num 个字符之外的其他字符。<br>如果 num 大于 str 的长度，left() 函数将返回 str。<br>如果 num 等于 0, left() 函数将返回空船 ‘’。<br>若参数为 NULL，该函数将返回 NULL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT left(<span class="hljs-string">&#x27;hello&#x27;</span>, 2)<br><span class="hljs-comment"># he</span><br>SELECT left(<span class="hljs-string">&#x27;hello&#x27;</span>, -3)<br><span class="hljs-comment"># he</span><br>SELECT left(<span class="hljs-string">&#x27;hello&#x27;</span>, 0)<br><span class="hljs-comment"># &#x27;&#x27;</span><br>SELECT left(<span class="hljs-string">&#x27;hello&#x27;</span>, null)<br><span class="hljs-comment"># null</span><br></code></pre></td></tr></table></figure><h4 id="感谢以下帮助"><a href="#感谢以下帮助" class="headerlink" title="感谢以下帮助"></a>感谢以下帮助</h4><p><a href="https://www.sjkjc.com/postgresql-ref/">数据库教程</a><br><a href="http://t.zoukankan.com/dyaqi-p-15402902.html">zoukankan</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pgsql</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的时间操作函数</title>
    <link href="/2022/06/16/pythondatetimefunction/"/>
    <url>/2022/06/16/pythondatetimefunction/</url>
    
    <content type="html"><![CDATA[<h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">import datetime<br></code></pre></td></tr></table></figure><h4 id="日期加减"><a href="#日期加减" class="headerlink" title="日期加减"></a>日期加减</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 定义开始时间</span><br>start = <span class="hljs-string">&#x27;2022-06-10&#x27;</span><br><span class="hljs-comment"># 结束时间--18天前</span><br>end = (datetime.datetime.strptime(start, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) +<br>        datetime.timedelta(days=-18)).strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br><span class="hljs-comment"># end = &#x27;2022-05-23&#x27;</span><br><br><span class="hljs-comment"># 今天之前的第30天</span><br>day = (datetime.datetime.now().strptime(lrrq, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) +<br>      datetime.timedelta(days=-30)).strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br><br><span class="hljs-comment"># day = &#x27;2022-05-11&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>datetime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10的pgsql安装教程</title>
    <link href="/2022/05/18/pgsqlinstall/"/>
    <url>/2022/05/18/pgsqlinstall/</url>
    
    <content type="html"><![CDATA[<h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><p>右键 此电脑 –&gt; 管理 –&gt; 系统工具 –&gt; 本地用户和组 –&gt; 用户<br>右键 用户 –&gt; 新用户<br>新建一个 名为 postgres 的用户 密码为数据库密码 (后续会要求设置数据库密码，保持一致)</p><h2 id="下载pgsql-13-7-并安装"><a href="#下载pgsql-13-7-并安装" class="headerlink" title="下载pgsql 13.7 并安装"></a>下载pgsql 13.7 并安装</h2><p><a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">下载地址</a><br><a href="http://www.postgres.cn/v2/document">中文社区</a></p><p>右键管理员运行 –&gt; 按照提示默认安装<br>local 选择 chinese-simplified China<br>端口不变   密码设置与新建用户的密码保持一致<br>最后安装完会提示安装不完整，不需要管</p><h2 id="对安装目录授权"><a href="#对安装目录授权" class="headerlink" title="对安装目录授权"></a>对安装目录授权</h2><p>右键安装文件夹 PostgreSQL –&gt; 安全 –&gt; 编辑<br>添加 postgres 用户 并授予完全控制权限</p><h2 id="初始化数据库-并-设置服务"><a href="#初始化数据库-并-设置服务" class="headerlink" title="初始化数据库 并 设置服务"></a>初始化数据库 并 设置服务</h2><p>管理员运行cmd 并进入 PostgreSQL安装目录下的bin目录，运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">initdb.exe -D ../data -W -U postgres<br></code></pre></td></tr></table></figure><p>输入密码与上面保持一致</p><p>初始化完成后添加服务，运行以下命令。  -D后接data位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pg_ctl.exe register -N <span class="hljs-string">&quot;pgsql&quot;</span> -D <span class="hljs-string">&quot;D:\PostgreSQL\13\data&quot;</span> <br></code></pre></td></tr></table></figure><p>注册服务后 可以在windows服务面板找到pgsql并启动</p><p>右键 此电脑 –&gt; 管理 –&gt; 服务和应用程序 –&gt; 服务<br>找到 pgsql 右键启动</p><h2 id="设置二进制路径"><a href="#设置二进制路径" class="headerlink" title="设置二进制路径"></a>设置二进制路径</h2><p>打开pgAdmin管理面板</p><p>文件-&gt;配置-&gt;路径-&gt;二进制路径</p><p>选择自己pgsql的版本，配置PostgreSQL 二进制路径到安装目录的bin目录下</p><h2 id="感谢以下帮助"><a href="#感谢以下帮助" class="headerlink" title="感谢以下帮助"></a>感谢以下帮助</h2><p> <a href="https://hanbo.blog.csdn.net/article/details/122370326">csdn教程1</a><br> <a href="https://blog.csdn.net/weixin_44637422/article/details/121731941">csdn教程2</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pgsql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客cdn问题</title>
    <link href="/2022/05/18/cdnforblog/"/>
    <url>/2022/05/18/cdnforblog/</url>
    
    <content type="html"><![CDATA[<h2 id="国内部分网络的-jsDelivrCDN-会无法连通，可以在主题配置的最底部，替换为如下配置（注意使用覆盖配置）："><a href="#国内部分网络的-jsDelivrCDN-会无法连通，可以在主题配置的最底部，替换为如下配置（注意使用覆盖配置）：" class="headerlink" title="国内部分网络的 jsDelivrCDN 会无法连通，可以在主题配置的最底部，替换为如下配置（注意使用覆盖配置）："></a>国内部分网络的 jsDelivrCDN 会无法连通，可以在主题配置的最底部，替换为如下配置（注意使用覆盖配置）：</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">static_prefix:<br>  <span class="hljs-comment"># 内部静态</span><br>  <span class="hljs-comment"># Internal static</span><br>  internal_js: /js<br>  internal_css: /css<br>  internal_img: /img<br><br>  anchor: https://lib.baomitu.com/anchor-js/4.3.1/<br><br>  github_markdown: https://lib.baomitu.com/github-markdown-css/4.0.0/<br><br>  jquery: https://lib.baomitu.com/jquery/3.6.0/<br><br>  bootstrap: https://lib.baomitu.com/twitter-bootstrap/4.6.1/<br><br>  prismjs: https://lib.baomitu.com/prism/1.26.0/<br><br>  tocbot: https://lib.baomitu.com/tocbot/4.18.0/<br><br>  typed: https://lib.baomitu.com/typed.js/2.0.12/<br><br>  fancybox: https://lib.baomitu.com/fancybox/3.5.7/<br><br>  nprogress: https://lib.baomitu.com/nprogress/0.2.0/<br><br>  mathjax: https://lib.baomitu.com/mathjax/3.2.0/<br><br>  katex: https://lib.baomitu.com/KaTeX/0.15.2/<br><br>  busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/<br><br>  clipboard: https://lib.baomitu.com/clipboard.js/2.0.10/<br><br>  mermaid: https://lib.baomitu.com/mermaid/8.13.10/<br><br>  valine: https://lib.baomitu.com/valine/1.4.16/<br><br>  waline: https://lib.baomitu.com/waline/1.5.2/<br><br>  gitalk: https://lib.baomitu.com/gitalk/1.7.2/<br><br>  disqusjs: https://lib.baomitu.com/disqusjs/1.3.0/<br><br>  twikoo: https://lib.baomitu.com/twikoo/1.4.17/<br><br>  hint: https://lib.baomitu.com/hint.css/2.7.0/<br></code></pre></td></tr></table></figure><h2 id="fluid官方修改cdn源为国内源"><a href="#fluid官方修改cdn源为国内源" class="headerlink" title="fluid官方修改cdn源为国内源"></a>fluid官方修改cdn源为国内源</h2><p> <a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/656">Github Issue</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客</title>
    <link href="/2022/04/27/thanksforblog/"/>
    <url>/2022/04/27/thanksforblog/</url>
    
    <content type="html"><![CDATA[<h2 id="对Git进行基本操作"><a href="#对Git进行基本操作" class="headerlink" title="对Git进行基本操作"></a>对Git进行基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ git config --global user.email <span class="hljs-string">&quot;dnf736@vip.qq.com&quot;</span><br>$ git config --global user.name <span class="hljs-string">&quot;Guo&quot;</span><br>$ git config --global http.sslVerify <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="清理编译部署到github"><a href="#清理编译部署到github" class="headerlink" title="清理编译部署到github"></a>清理编译部署到github</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><h2 id="感谢以下帮助"><a href="#感谢以下帮助" class="headerlink" title="感谢以下帮助"></a>感谢以下帮助</h2><p> <a href="https://www.zhihu.com/question/24422335/answers/updated">JimmyWang知乎教程</a><br> <a href="https://hexo.fluid-dev.com/docs/">Fluid</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/27/hello-world/"/>
    <url>/2022/04/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
